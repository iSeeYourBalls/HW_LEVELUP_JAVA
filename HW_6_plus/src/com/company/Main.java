package com.company;

public class Main {

    public static void main(String[] args)
    {
        Lib program = new Lib();

//       1.Для арифметических операций с большими числами, которые не могут быть
//        представлены в памяти компьютера, используется следующий прием. Каждая
//        цифра таких чисел записывается в отдельный элемент массива, и необходимые
//        операции проводятся с элементами массива цифр. Составить программу
//        выполняющую сложение 20-значных чисел
        program.sumBigNum("12345678910123456789", "12345678910123456789");

//       2.Дан массив целых чисел. Найти:
        int arr [] = {8,2,0,4,6,10,8,13};
//        а) номер первого нечетного элемента. Если нечетных элементов в массиве нет,
//        то должно быть напечатано соответствующее сообщение;
        program.searchArrFirstEl(arr);
//        б) номер первого элемента, кратного числу 13. Если таких элементов в массиве
//        нет, то должно быть напечатано соответствующее сообщение.
        program.searchArr13El(arr);
//    3.Известен рост 30 учеников школы. Сколько из них имеет рост больше 170
//    см? Можно ли сформировать баскетбольную команду (в команде должно быть
//    не менее пяти человек ростом больше 170 см)?
        int [] heightStudents = new int [30];
        //Создали массив залили студентов
        for(int i = 0; i < heightStudents.length; i++)
        {
            heightStudents[i] = 155 + (int)(Math.random() * ((185 - 155) + 1));
        }
        program.basketTeam(heightStudents);

//    4) В массиве хранится информация о росте 35 человек. Определить, сколько
//    человек имеют самый большой рост. * Задачу решить, не используя два прохода
//    по массиву.
        int [] heightMan = new int [35];
        for(int i = 0; i < heightMan.length; i++)
        {
            heightMan[i] = 155 + (int)(Math.random() * ((185 - 155) + 1));
        }
        //int [] heightMan = {120,150,155,150,155,180,135,180, 162,174, 180,171,180, 172, 56,180};
        program.maxManHeight(heightMan);
//    5) В массиве хранится информация о годе рождения каждого из 30 человек.
//        Определить, на сколько лет возраст самого старого человека превышает возраст
//    самого молодого. При определении возраста учитывать только год рождения
//        (месяц и день не учитывать). * Задачу решить, не используя два прохода по
//    массиву

        int [] ageArr  = new int [30];
        for(int i = 0; i < ageArr.length; i++)
        {
            ageArr[i] = 1954 + (int)(Math.random() * ((2006 - 1954) + 1));
        }
        program.oldVSYoung(ageArr);
        //Вариант без цикла
        program.oldVSYoung2(ageArr);
    }
}
